openapi: 3.0.3
info:
    title: Blog Server - OpenAPI 3.0
    description: |-
        This backend for Simbir Health Server based on the OpenAPI 3.0 specification.
    termsOfService: http://swagger.io/terms/
    contact:
        email: wefdrus34@gmail.com
    version: 1.0.11
servers:
    - url: http://localhost:8080/
      description: Dev server

paths: # create requests
    /api/Authentication/SignUp:
        post:
            summary: Registration a new users
            tags:
                - Authentication
            requestBody: # то что мы должны передовать
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserReg"
            responses:
                "200":
                    description: StatusOk
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                                #Login to account

    /api/Authentication/SignIn:
        post:
            summary: Login to account
            tags:
                - Authentication
            requestBody: # то что мы должны передовать
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserLogin"
            responses:
                "200":
                    description: StatusOk
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /api/Authentication/SignOut:
        put:
            summary: delete cookie(signOut)
            tags:
                - Authentication
            responses:
                "200":
                    description: StatusOk
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /api/Authentication/Validate:
        get:
            summary: checking access token
            tags:
                - Authentication
            parameters:
                - name: accessToken
                  in: cookie
                  required: true
                  description: accessToken for Validate
                  schema:
                      type: string
                  example: "jocvx.sdfoa.sadofj"
            responses:
                "200":
                    description: StatusOk
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /api/Authentication/Refresh:
        post:
            summary: checking refreshToken and pass a new couple tokens to user. If refreshToken equal "" wil be get from cookie refreshToken
            tags:
                - Authentication
            requestBody: # то что мы должны передовать
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RefreshToken"
            responses:
                "200":
                    description: StatusOk
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    /api/Accounts/Me:
        get:
            summary: get data about a current account
            tags:
                - Accounts
            responses:
                "200":
                    description: All data about user
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AllInfo"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    #TODO если чел будет передовать пустые кавычки то это не обнавляем
    /api/Accounts/Update:
        put:
            summary: update data for cuurent account if you pass "" it won't be update in db
            tags:
                - Authentication
            requestBody: # то что мы должны передовать
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdate"
            responses:
                "200":
                    description: All data about user
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
    #will be in query parametrs from: с какой записи начать из бд count сколько после этого
    /api/Accounts:
        post:
            summary: get all accounts with settings (if your role is admin)
            tags:
                - Accounts
            parameters:
                - name: from
                  in: query
                  schema:
                      type: integer
                      example: 1
                  description: it's field for enter where start get data from db
                - name: count
                  in: query
                  schema:
                      type: integer
                      example: 10
                  description: it's field for count get users
            responses:
                "200":
                    description: All data about user
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StatusOk"
                "default":
                    description: not ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
components:
    schemas:
        #without password
        User:
            type: object
            required:
                - id
                - lastName
                - firstName
                - username
                - roles #[массив]

        UserReg:
            type: object
            required:
                - lastName
                - firstName
                - username
                - password
            properties:
                lastName:
                    type: string
                    example: "Vorobiev"
                firstName:
                    type: string
                    example: "Dmitry"
                username:
                    type: string
                    example: "wefdzen"
                password:
                    type: string
                    example: "123"
        UserLogin:
            type: object
            required:
                - username
                - password
            properties:
                username:
                    type: string
                    example: "wefdzen"
                password:
                    type: string
                    example: "123"
        RefreshToken:
            type: object
            required:
                - refreshToken
            properties:
                refreshToken:
                    type: string
                    example: "ocxvier.ovcixojer.oicvxer"
        UserUpdate:
            type: object
            required:
                - lastName
                - firstName
                - password
            properties:
                lastName:
                    type: string
                    example: "Vorobiev"
                firstName:
                    type: string
                    example: "Dmitry"
                password:
                    type: string
                    example: "321"
        AllInfo:
            type: object
            required:
                - lastName
                - firstName
                - userName
                - role
            properties:
                lastName:
                    type: string
                    example: "Vorobiev"
                firstName:
                    type: string
                    example: "Dmitry"
                userName:
                    type: string
                    example: "wefdzen"
                role:
                    type: string
                    example: "123"
        StatusOk:
            type: object
            required:
                - status
            properties:
                status:
                    title: "status"
                    example: "ok"
        Error:
            type: object
            required:
                - code
                - message
            properties:
                code:
                    type: integer
                message:
                    type: string
